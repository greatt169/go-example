// Code generated by protoc-gen-go. DO NOT EDIT.
// source: news-ms/app/interfaces/grpc/proto/v1/access_control/access_control.proto

package access_control_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Объект с информацией о работоспособности сервиса
type HealthResponse struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceStatus        string   `protobuf:"bytes,2,opt,name=serviceStatus,proto3" json:"serviceStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthResponse) Reset()         { *m = HealthResponse{} }
func (m *HealthResponse) String() string { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()    {}
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f976f7d95839a25, []int{0}
}

func (m *HealthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthResponse.Unmarshal(m, b)
}
func (m *HealthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthResponse.Marshal(b, m, deterministic)
}
func (m *HealthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthResponse.Merge(m, src)
}
func (m *HealthResponse) XXX_Size() int {
	return xxx_messageInfo_HealthResponse.Size(m)
}
func (m *HealthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthResponse proto.InternalMessageInfo

func (m *HealthResponse) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *HealthResponse) GetServiceStatus() string {
	if m != nil {
		return m.ServiceStatus
	}
	return ""
}

type BaseResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseResponse) Reset()         { *m = BaseResponse{} }
func (m *BaseResponse) String() string { return proto.CompactTextString(m) }
func (*BaseResponse) ProtoMessage()    {}
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f976f7d95839a25, []int{1}
}

func (m *BaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaseResponse.Unmarshal(m, b)
}
func (m *BaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaseResponse.Marshal(b, m, deterministic)
}
func (m *BaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseResponse.Merge(m, src)
}
func (m *BaseResponse) XXX_Size() int {
	return xxx_messageInfo_BaseResponse.Size(m)
}
func (m *BaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BaseResponse proto.InternalMessageInfo

func (m *BaseResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *BaseResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type EmptyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f976f7d95839a25, []int{2}
}

func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyRequest.Unmarshal(m, b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return xxx_messageInfo_EmptyRequest.Size(m)
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

type UserInfo struct {
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LastName             string   `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	SecondName           string   `protobuf:"bytes,4,opt,name=secondName,proto3" json:"secondName,omitempty"`
	Position             string   `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	Role                 string   `protobuf:"bytes,6,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f976f7d95839a25, []int{3}
}

func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfo.Unmarshal(m, b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return xxx_messageInfo_UserInfo.Size(m)
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfo) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UserInfo) GetSecondName() string {
	if m != nil {
		return m.SecondName
	}
	return ""
}

func (m *UserInfo) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *UserInfo) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type Token struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f976f7d95839a25, []int{4}
}

func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Privileges struct {
	// uid пользователя
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	// авторизован ли пользователь
	IsAuthorized bool `protobuf:"varint,2,opt,name=isAuthorized,proto3" json:"isAuthorized,omitempty"`
	// настройки доступа к страницам
	Pages *Pages `protobuf:"bytes,3,opt,name=pages,proto3" json:"pages,omitempty"`
	// настройки доступа к сущностям
	Entities *Entities `protobuf:"bytes,4,opt,name=entities,proto3" json:"entities,omitempty"`
	// id запроса
	Pstxid               string   `protobuf:"bytes,5,opt,name=pstxid,proto3" json:"pstxid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Privileges) Reset()         { *m = Privileges{} }
func (m *Privileges) String() string { return proto.CompactTextString(m) }
func (*Privileges) ProtoMessage()    {}
func (*Privileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f976f7d95839a25, []int{5}
}

func (m *Privileges) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Privileges.Unmarshal(m, b)
}
func (m *Privileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Privileges.Marshal(b, m, deterministic)
}
func (m *Privileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Privileges.Merge(m, src)
}
func (m *Privileges) XXX_Size() int {
	return xxx_messageInfo_Privileges.Size(m)
}
func (m *Privileges) XXX_DiscardUnknown() {
	xxx_messageInfo_Privileges.DiscardUnknown(m)
}

var xxx_messageInfo_Privileges proto.InternalMessageInfo

func (m *Privileges) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Privileges) GetIsAuthorized() bool {
	if m != nil {
		return m.IsAuthorized
	}
	return false
}

func (m *Privileges) GetPages() *Pages {
	if m != nil {
		return m.Pages
	}
	return nil
}

func (m *Privileges) GetEntities() *Entities {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *Privileges) GetPstxid() string {
	if m != nil {
		return m.Pstxid
	}
	return ""
}

type Pages struct {
	Main  []string `protobuf:"bytes,1,rep,name=main,proto3" json:"main,omitempty"`
	Login []string `protobuf:"bytes,2,rep,name=login,proto3" json:"login,omitempty"`
	// add_income_information (заполнить форму, скачать шаблон)
	// show_income_results (просмотреть / скачать результат заполнения формы)
	Calculations         []string `protobuf:"bytes,3,rep,name=calculations,proto3" json:"calculations,omitempty"`
	Requests             []string `protobuf:"bytes,4,rep,name=requests,proto3" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pages) Reset()         { *m = Pages{} }
func (m *Pages) String() string { return proto.CompactTextString(m) }
func (*Pages) ProtoMessage()    {}
func (*Pages) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f976f7d95839a25, []int{6}
}

func (m *Pages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pages.Unmarshal(m, b)
}
func (m *Pages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pages.Marshal(b, m, deterministic)
}
func (m *Pages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pages.Merge(m, src)
}
func (m *Pages) XXX_Size() int {
	return xxx_messageInfo_Pages.Size(m)
}
func (m *Pages) XXX_DiscardUnknown() {
	xxx_messageInfo_Pages.DiscardUnknown(m)
}

var xxx_messageInfo_Pages proto.InternalMessageInfo

func (m *Pages) GetMain() []string {
	if m != nil {
		return m.Main
	}
	return nil
}

func (m *Pages) GetLogin() []string {
	if m != nil {
		return m.Login
	}
	return nil
}

func (m *Pages) GetCalculations() []string {
	if m != nil {
		return m.Calculations
	}
	return nil
}

func (m *Pages) GetRequests() []string {
	if m != nil {
		return m.Requests
	}
	return nil
}

type Entities struct {
	// привилегии для новостей, возможные значения:
	// - create (создавать)
	// - show_active (просматривать опубликованные)
	// - show_deactivated (просматривать черновики)
	// - show_delayed (просматривать отложенно опубликованные)
	// - update_active (изменять опубликованные)
	// - update_deactivated (изменять черновики)
	// - delete_active (удалять опубликованные)
	// - delete_deactivated (удалять черновики)
	// - search (искать и видеть результаты поиска)
	// - sort (сортировать по дате)
	// - subscribe (подписаться на новости)
	// - filter (фильтрация новостей)
	// - show_news_detail (просматривать детальную страницу новостей)
	News []string `protobuf:"bytes,1,rep,name=news,proto3" json:"news,omitempty"`
	// привилегии для акций, возможные значения:
	// - create (создавать)
	// - show_deactivated (просматривать черновики)
	// - show_delayed (просматривать отложенно опубликованные
	// - show_active (просматривать опубликованные)
	// - update_active (изменять опубликованные)
	// - update_deactivated (изменять черновики)
	// - delete_active (удалять опубликованные)
	// - delete_deactivated (удалять черновики)
	Promo []string `protobuf:"bytes,2,rep,name=promo,proto3" json:"promo,omitempty"`
	// привилегии для документов:
	// create_folder (создать директорию)
	// rename_folder (переименовать директорию)
	// delete_folder (удалить дирекорию)
	// permission_folder (изменить права на директорию)
	// show_draft (просматривать директории-черновики)
	// show_all (просматривать все дирекории)
	// show_files (просматривать файлы в директории)
	// add_file (добавлять файлы в директории)
	// download_file (скачивать файлы)
	// delete_file (удалять файлы)
	Documents []string `protobuf:"bytes,3,rep,name=documents,proto3" json:"documents,omitempty"`
	// привилегии для взаиморасчетов:
	// show_documents (просматривать документы)
	// show_document_comment (просмотреть комментарий к документу)
	// add_document_comment (написать комментарий к документу)
	// approve_document (согласовать документ)
	// disapprove_document (не согласовать документ)
	// download_document (скачать документ)
	// income_form (заполнить форму, скачать шаблон)
	// show_income_list (скачать результат заполнения формы)
	Calculations []string `protobuf:"bytes,4,rep,name=calculations,proto3" json:"calculations,omitempty"`
	// привилегии для заявок:
	// - "show_active_own" - просмотреть список доступных заявок по prmId
	// - "show_active_all" - просмотреть список заявок всех
	// - "filter_all" - фильтровать заявки по всем атрибутам
	// - "filter_own" - фильтровать заявки по атрибутам
	// - "create" - создать заявку
	// - "show_detail_own" - просмотреть детальную заявки
	// - "show_detail_all" - просмотреть детальную заявки(без проверок принаддежности)
	// - "cancel", - отменить заявку
	// - "edit", - изменить заявку
	// - "reopen" - открыть повторно
	Requests []string `protobuf:"bytes,5,rep,name=requests,proto3" json:"requests,omitempty"`
	// привилегии для отчётов:
	// - "mailing_schedule" - просмотреть или изменить расписание рассылки отчетов
	Reports              []string `protobuf:"bytes,6,rep,name=reports,proto3" json:"reports,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entities) Reset()         { *m = Entities{} }
func (m *Entities) String() string { return proto.CompactTextString(m) }
func (*Entities) ProtoMessage()    {}
func (*Entities) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f976f7d95839a25, []int{7}
}

func (m *Entities) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entities.Unmarshal(m, b)
}
func (m *Entities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entities.Marshal(b, m, deterministic)
}
func (m *Entities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entities.Merge(m, src)
}
func (m *Entities) XXX_Size() int {
	return xxx_messageInfo_Entities.Size(m)
}
func (m *Entities) XXX_DiscardUnknown() {
	xxx_messageInfo_Entities.DiscardUnknown(m)
}

var xxx_messageInfo_Entities proto.InternalMessageInfo

func (m *Entities) GetNews() []string {
	if m != nil {
		return m.News
	}
	return nil
}

func (m *Entities) GetPromo() []string {
	if m != nil {
		return m.Promo
	}
	return nil
}

func (m *Entities) GetDocuments() []string {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *Entities) GetCalculations() []string {
	if m != nil {
		return m.Calculations
	}
	return nil
}

func (m *Entities) GetRequests() []string {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *Entities) GetReports() []string {
	if m != nil {
		return m.Reports
	}
	return nil
}

// Объект статуса авторизации
type AuthorizationStatus struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthorizationStatus) Reset()         { *m = AuthorizationStatus{} }
func (m *AuthorizationStatus) String() string { return proto.CompactTextString(m) }
func (*AuthorizationStatus) ProtoMessage()    {}
func (*AuthorizationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f976f7d95839a25, []int{8}
}

func (m *AuthorizationStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthorizationStatus.Unmarshal(m, b)
}
func (m *AuthorizationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthorizationStatus.Marshal(b, m, deterministic)
}
func (m *AuthorizationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationStatus.Merge(m, src)
}
func (m *AuthorizationStatus) XXX_Size() int {
	return xxx_messageInfo_AuthorizationStatus.Size(m)
}
func (m *AuthorizationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationStatus proto.InternalMessageInfo

func (m *AuthorizationStatus) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*HealthResponse)(nil), "access_control_v1.HealthResponse")
	proto.RegisterType((*BaseResponse)(nil), "access_control_v1.BaseResponse")
	proto.RegisterType((*EmptyRequest)(nil), "access_control_v1.EmptyRequest")
	proto.RegisterType((*UserInfo)(nil), "access_control_v1.UserInfo")
	proto.RegisterType((*Token)(nil), "access_control_v1.Token")
	proto.RegisterType((*Privileges)(nil), "access_control_v1.Privileges")
	proto.RegisterType((*Pages)(nil), "access_control_v1.Pages")
	proto.RegisterType((*Entities)(nil), "access_control_v1.Entities")
	proto.RegisterType((*AuthorizationStatus)(nil), "access_control_v1.AuthorizationStatus")
}

func init() {
	proto.RegisterFile("news-ms/app/interfaces/grpc/proto/v1/access_control/access_control.proto", fileDescriptor_0f976f7d95839a25)
}

var fileDescriptor_0f976f7d95839a25 = []byte{
	// 701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xdf, 0x4e, 0x14, 0x3f,
	0x14, 0xce, 0x2c, 0xec, 0xb2, 0x9c, 0xe5, 0xc7, 0x2f, 0x54, 0x63, 0x26, 0x0b, 0x28, 0x14, 0x63,
	0xc4, 0xc4, 0x9d, 0xb0, 0x9a, 0x98, 0x78, 0x07, 0x86, 0x08, 0x17, 0x1a, 0xb2, 0x68, 0xe2, 0x1d,
	0xa9, 0xb3, 0x87, 0xd9, 0x86, 0x99, 0x76, 0x68, 0xbb, 0x8b, 0x1a, 0x63, 0xa2, 0x4f, 0x60, 0xf4,
	0x0d, 0xf4, 0xd6, 0x17, 0xf1, 0xda, 0x57, 0xf0, 0x41, 0x4c, 0x3b, 0x7f, 0x98, 0x95, 0x41, 0xee,
	0xfa, 0x9d, 0x73, 0xda, 0xef, 0x3b, 0x3d, 0x7f, 0x60, 0x4f, 0xe0, 0x99, 0xbe, 0x9f, 0xe8, 0x80,
	0xa5, 0x69, 0xc0, 0x85, 0x41, 0x75, 0xcc, 0x42, 0xd4, 0x41, 0xa4, 0xd2, 0x30, 0x48, 0x95, 0x34,
	0x32, 0x98, 0x6c, 0x05, 0x2c, 0x0c, 0x51, 0xeb, 0xa3, 0x50, 0x0a, 0xa3, 0x64, 0xfc, 0x17, 0xec,
	0xb9, 0x30, 0xb2, 0x34, 0x6d, 0x3d, 0x9a, 0x6c, 0x75, 0x57, 0x22, 0x29, 0xa3, 0x18, 0x03, 0x96,
	0xf2, 0x80, 0x09, 0x21, 0x0d, 0x33, 0x5c, 0x0a, 0x9d, 0x5d, 0xa0, 0xaf, 0x60, 0x71, 0x0f, 0x59,
	0x6c, 0x46, 0x03, 0xd4, 0xa9, 0x14, 0x1a, 0xc9, 0x1a, 0x74, 0x34, 0xaa, 0x09, 0x0f, 0xf1, 0x39,
	0x4b, 0xd0, 0xf7, 0xd6, 0xbc, 0xbb, 0xf3, 0x83, 0xaa, 0x89, 0xdc, 0x86, 0xff, 0x72, 0x78, 0x68,
	0x98, 0x19, 0x6b, 0xbf, 0xe1, 0x62, 0xa6, 0x8d, 0x74, 0x07, 0x16, 0x76, 0x98, 0xc6, 0xf2, 0x5d,
	0x1f, 0xe6, 0xf4, 0xd8, 0xa9, 0x73, 0x6f, 0xb6, 0x07, 0x05, 0xb4, 0x9e, 0x04, 0xb5, 0x66, 0x11,
	0xe6, 0x2f, 0x15, 0x90, 0x2e, 0xc2, 0xc2, 0x6e, 0x92, 0x9a, 0xb7, 0x03, 0x3c, 0x1d, 0xa3, 0x36,
	0xf4, 0x9b, 0x07, 0xed, 0x97, 0x1a, 0xd5, 0xbe, 0x38, 0x96, 0xe4, 0x06, 0xb4, 0xc6, 0xf6, 0x3c,
	0xcc, 0x35, 0xe6, 0x88, 0x10, 0x98, 0x15, 0x56, 0x79, 0xf6, 0x96, 0x3b, 0x93, 0x2e, 0xb4, 0x63,
	0xa6, 0x8d, 0xcb, 0x68, 0xc6, 0xd9, 0x4b, 0x4c, 0x6e, 0x02, 0x68, 0x0c, 0xa5, 0x18, 0x3a, 0xef,
	0xac, 0xf3, 0x56, 0x2c, 0xf6, 0x6e, 0x2a, 0x35, 0xb7, 0xbf, 0xe6, 0x37, 0xb3, 0xbb, 0x05, 0xb6,
	0x5c, 0x4a, 0xc6, 0xe8, 0xb7, 0x32, 0x2e, 0x7b, 0xa6, 0xab, 0xd0, 0x7c, 0x21, 0x4f, 0x50, 0x90,
	0xeb, 0xd0, 0x34, 0xf6, 0x90, 0xeb, 0xcb, 0x00, 0xfd, 0xe9, 0x01, 0x1c, 0x28, 0x3e, 0xe1, 0x31,
	0x46, 0xa8, 0x2f, 0xcd, 0x82, 0xc2, 0x02, 0xd7, 0xdb, 0x63, 0x33, 0x92, 0x8a, 0xbf, 0xc3, 0xa1,
	0xcb, 0xa6, 0x3d, 0x98, 0xb2, 0x91, 0x1e, 0x34, 0x53, 0x16, 0xa1, 0x76, 0x29, 0x75, 0xfa, 0x7e,
	0xef, 0x42, 0xf5, 0x7b, 0x07, 0xd6, 0x3f, 0xc8, 0xc2, 0xc8, 0x23, 0x68, 0xa3, 0x30, 0xdc, 0x70,
	0xd4, 0x2e, 0xcf, 0x4e, 0x7f, 0xb9, 0xe6, 0xca, 0x6e, 0x1e, 0x32, 0x28, 0x83, 0xad, 0xc8, 0x54,
	0x9b, 0x37, 0x7c, 0x98, 0x7f, 0x40, 0x8e, 0xe8, 0x29, 0x34, 0x1d, 0x81, 0xfd, 0x87, 0x84, 0x71,
	0x9b, 0xe9, 0x8c, 0xfd, 0x07, 0x7b, 0xb6, 0xe9, 0xc7, 0x32, 0xe2, 0xc2, 0x6f, 0x38, 0x63, 0x06,
	0x6c, 0x5e, 0x21, 0x8b, 0xc3, 0x71, 0x9c, 0xb5, 0xa1, 0x3f, 0xe3, 0x9c, 0x53, 0x36, 0xfb, 0xe3,
	0x2a, 0xab, 0xb8, 0xd5, 0x69, 0xfd, 0x25, 0xa6, 0x3f, 0x3c, 0x68, 0x17, 0x0a, 0x5d, 0xa9, 0xf1,
	0x4c, 0x17, 0xb4, 0xf6, 0x6c, 0x69, 0x53, 0x25, 0x13, 0x59, 0xd0, 0x3a, 0x40, 0x56, 0x60, 0x7e,
	0x28, 0xc3, 0x71, 0x82, 0xc2, 0x14, 0x9c, 0xe7, 0x86, 0x0b, 0xa2, 0x66, 0xaf, 0x10, 0xd5, 0x9c,
	0x16, 0x65, 0x3b, 0x58, 0x61, 0x2a, 0x95, 0xd1, 0x7e, 0xcb, 0xb9, 0x0a, 0x48, 0x03, 0xb8, 0x56,
	0x14, 0xcc, 0xbd, 0x93, 0x0d, 0xc7, 0xe5, 0xc3, 0xd0, 0xff, 0xd8, 0x80, 0xa5, 0xf3, 0xf6, 0x38,
	0xcc, 0x46, 0x8a, 0xc4, 0x30, 0xf7, 0x14, 0x8d, 0x6d, 0x7d, 0x72, 0xab, 0xae, 0x64, 0x95, 0x21,
	0xe9, 0xd6, 0xd5, 0xb4, 0x18, 0x1a, 0xba, 0xf1, 0xe9, 0xd7, 0xef, 0xaf, 0x8d, 0x55, 0xb2, 0x1c,
	0xa0, 0x5b, 0x08, 0x2e, 0xb2, 0x58, 0x29, 0x93, 0xad, 0xc0, 0x76, 0x1f, 0xf9, 0x00, 0x4b, 0x39,
	0x5b, 0xa5, 0x51, 0xaf, 0xe4, 0x5d, 0xad, 0x6b, 0xbf, 0xf2, 0x3e, 0xdd, 0x74, 0xcc, 0x1b, 0x64,
	0xfd, 0x12, 0xe6, 0xb4, 0x0c, 0xed, 0x7f, 0xf1, 0x80, 0x6c, 0x3b, 0xff, 0x93, 0x11, 0x86, 0x27,
	0xc5, 0x27, 0xbc, 0x87, 0x8e, 0xc3, 0xd9, 0xc2, 0xba, 0x5a, 0xd0, 0x7a, 0x4d, 0xc0, 0xf4, 0xb2,
	0xfb, 0xb7, 0xa8, 0x84, 0x09, 0x16, 0x61, 0x30, 0x72, 0x57, 0xfa, 0xdf, 0x3d, 0x58, 0x7c, 0x86,
	0x46, 0xf1, 0xb0, 0xac, 0xca, 0x67, 0x0f, 0xfe, 0x3f, 0x44, 0xb3, 0x5f, 0x9d, 0xc9, 0x3b, 0x35,
	0xa4, 0x35, 0x1d, 0xd0, 0xad, 0x53, 0x5f, 0xdd, 0x97, 0xf4, 0xa1, 0x93, 0xd6, 0xa3, 0x9b, 0xb5,
	0xd2, 0x32, 0x21, 0x01, 0xab, 0xbe, 0xfc, 0xd8, 0xbb, 0xf7, 0xba, 0xe5, 0xd6, 0xfa, 0x83, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x25, 0xbd, 0xd8, 0xc4, 0x53, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PrivilegesServiceClient is the client API for PrivilegesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivilegesServiceClient interface {
	// Получение данных пользователя
	GetUser(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UserInfo, error)
	// Получение привилегий пользователя
	GetUserPrivileges(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Privileges, error)
}

type privilegesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivilegesServiceClient(cc grpc.ClientConnInterface) PrivilegesServiceClient {
	return &privilegesServiceClient{cc}
}

func (c *privilegesServiceClient) GetUser(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/access_control_v1.PrivilegesService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privilegesServiceClient) GetUserPrivileges(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Privileges, error) {
	out := new(Privileges)
	err := c.cc.Invoke(ctx, "/access_control_v1.PrivilegesService/GetUserPrivileges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivilegesServiceServer is the server API for PrivilegesService service.
type PrivilegesServiceServer interface {
	// Получение данных пользователя
	GetUser(context.Context, *EmptyRequest) (*UserInfo, error)
	// Получение привилегий пользователя
	GetUserPrivileges(context.Context, *EmptyRequest) (*Privileges, error)
}

// UnimplementedPrivilegesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPrivilegesServiceServer struct {
}

func (*UnimplementedPrivilegesServiceServer) GetUser(ctx context.Context, req *EmptyRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedPrivilegesServiceServer) GetUserPrivileges(ctx context.Context, req *EmptyRequest) (*Privileges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPrivileges not implemented")
}

func RegisterPrivilegesServiceServer(s *grpc.Server, srv PrivilegesServiceServer) {
	s.RegisterService(&_PrivilegesService_serviceDesc, srv)
}

func _PrivilegesService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivilegesServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access_control_v1.PrivilegesService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivilegesServiceServer).GetUser(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivilegesService_GetUserPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivilegesServiceServer).GetUserPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access_control_v1.PrivilegesService/GetUserPrivileges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivilegesServiceServer).GetUserPrivileges(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrivilegesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "access_control_v1.PrivilegesService",
	HandlerType: (*PrivilegesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _PrivilegesService_GetUser_Handler,
		},
		{
			MethodName: "GetUserPrivileges",
			Handler:    _PrivilegesService_GetUserPrivileges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news-ms/app/interfaces/grpc/proto/v1/access_control/access_control.proto",
}

// AccessCheckServiceClient is the client API for AccessCheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessCheckServiceClient interface {
	// Проверка жизнеспособности сервиса
	CheckHealth(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type accessCheckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessCheckServiceClient(cc grpc.ClientConnInterface) AccessCheckServiceClient {
	return &accessCheckServiceClient{cc}
}

func (c *accessCheckServiceClient) CheckHealth(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/access_control_v1.AccessCheckService/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessCheckServiceServer is the server API for AccessCheckService service.
type AccessCheckServiceServer interface {
	// Проверка жизнеспособности сервиса
	CheckHealth(context.Context, *EmptyRequest) (*HealthResponse, error)
}

// UnimplementedAccessCheckServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAccessCheckServiceServer struct {
}

func (*UnimplementedAccessCheckServiceServer) CheckHealth(ctx context.Context, req *EmptyRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}

func RegisterAccessCheckServiceServer(s *grpc.Server, srv AccessCheckServiceServer) {
	s.RegisterService(&_AccessCheckService_serviceDesc, srv)
}

func _AccessCheckService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessCheckServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access_control_v1.AccessCheckService/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessCheckServiceServer).CheckHealth(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessCheckService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "access_control_v1.AccessCheckService",
	HandlerType: (*AccessCheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _AccessCheckService_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news-ms/app/interfaces/grpc/proto/v1/access_control/access_control.proto",
}

// MetricsServiceClient is the client API for MetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsServiceClient interface {
	// Проверка жизнеспособности сервиса
	SetIsAuthorized(ctx context.Context, in *AuthorizationStatus, opts ...grpc.CallOption) (*BaseResponse, error)
}

type metricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsServiceClient(cc grpc.ClientConnInterface) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) SetIsAuthorized(ctx context.Context, in *AuthorizationStatus, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/access_control_v1.MetricsService/SetIsAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServiceServer is the server API for MetricsService service.
type MetricsServiceServer interface {
	// Проверка жизнеспособности сервиса
	SetIsAuthorized(context.Context, *AuthorizationStatus) (*BaseResponse, error)
}

// UnimplementedMetricsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMetricsServiceServer struct {
}

func (*UnimplementedMetricsServiceServer) SetIsAuthorized(ctx context.Context, req *AuthorizationStatus) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIsAuthorized not implemented")
}

func RegisterMetricsServiceServer(s *grpc.Server, srv MetricsServiceServer) {
	s.RegisterService(&_MetricsService_serviceDesc, srv)
}

func _MetricsService_SetIsAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).SetIsAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access_control_v1.MetricsService/SetIsAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).SetIsAuthorized(ctx, req.(*AuthorizationStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "access_control_v1.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetIsAuthorized",
			Handler:    _MetricsService_SetIsAuthorized_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news-ms/app/interfaces/grpc/proto/v1/access_control/access_control.proto",
}
