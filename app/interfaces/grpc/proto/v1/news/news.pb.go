// Code generated by protoc-gen-go. DO NOT EDIT.
// source: news-ms/app/interfaces/grpc/proto/v1/news/news.proto

package content_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Объект с информацией о работоспособности сервиса
type HealthResponse struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceStatus        string   `protobuf:"bytes,2,opt,name=serviceStatus,proto3" json:"serviceStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthResponse) Reset()         { *m = HealthResponse{} }
func (m *HealthResponse) String() string { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()    {}
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{0}
}

func (m *HealthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthResponse.Unmarshal(m, b)
}
func (m *HealthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthResponse.Marshal(b, m, deterministic)
}
func (m *HealthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthResponse.Merge(m, src)
}
func (m *HealthResponse) XXX_Size() int {
	return xxx_messageInfo_HealthResponse.Size(m)
}
func (m *HealthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthResponse proto.InternalMessageInfo

func (m *HealthResponse) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *HealthResponse) GetServiceStatus() string {
	if m != nil {
		return m.ServiceStatus
	}
	return ""
}

// Объект Email пользователя
type Email struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Email) Reset()         { *m = Email{} }
func (m *Email) String() string { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()    {}
func (*Email) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{1}
}

func (m *Email) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Email.Unmarshal(m, b)
}
func (m *Email) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Email.Marshal(b, m, deterministic)
}
func (m *Email) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Email.Merge(m, src)
}
func (m *Email) XXX_Size() int {
	return xxx_messageInfo_Email.Size(m)
}
func (m *Email) XXX_DiscardUnknown() {
	xxx_messageInfo_Email.DiscardUnknown(m)
}

var xxx_messageInfo_Email proto.InternalMessageInfo

func (m *Email) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// Входные данные для запроса списка новостей
type NewsRequestParams struct {
	// Номер строки, которой начинается выборка
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Количество возвращаемых объектов на странице
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Поле для сортировки (active_from, date_create)
	Sort string `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	// Направление сортировки (desc, asc)
	Order string `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	// Поиск по строке
	Query string `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	// Параметры фильтрации
	Filter               *ListRequestFilter `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NewsRequestParams) Reset()         { *m = NewsRequestParams{} }
func (m *NewsRequestParams) String() string { return proto.CompactTextString(m) }
func (*NewsRequestParams) ProtoMessage()    {}
func (*NewsRequestParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{2}
}

func (m *NewsRequestParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewsRequestParams.Unmarshal(m, b)
}
func (m *NewsRequestParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewsRequestParams.Marshal(b, m, deterministic)
}
func (m *NewsRequestParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsRequestParams.Merge(m, src)
}
func (m *NewsRequestParams) XXX_Size() int {
	return xxx_messageInfo_NewsRequestParams.Size(m)
}
func (m *NewsRequestParams) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsRequestParams.DiscardUnknown(m)
}

var xxx_messageInfo_NewsRequestParams proto.InternalMessageInfo

func (m *NewsRequestParams) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *NewsRequestParams) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *NewsRequestParams) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *NewsRequestParams) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *NewsRequestParams) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *NewsRequestParams) GetFilter() *ListRequestFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

// Параметры фильтрации
type ListRequestFilter struct {
	// фильтр по пользователю
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	// фильтр по активности
	//   1. не передано - опубликованные и черновики
	//   2. active - только опубликованные
	//   3. inactive черновики)
	Mode                 string   `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequestFilter) Reset()         { *m = ListRequestFilter{} }
func (m *ListRequestFilter) String() string { return proto.CompactTextString(m) }
func (*ListRequestFilter) ProtoMessage()    {}
func (*ListRequestFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{3}
}

func (m *ListRequestFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequestFilter.Unmarshal(m, b)
}
func (m *ListRequestFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequestFilter.Marshal(b, m, deterministic)
}
func (m *ListRequestFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequestFilter.Merge(m, src)
}
func (m *ListRequestFilter) XXX_Size() int {
	return xxx_messageInfo_ListRequestFilter.Size(m)
}
func (m *ListRequestFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequestFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequestFilter proto.InternalMessageInfo

func (m *ListRequestFilter) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListRequestFilter) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

// Входные данные для запроса списка акций
type PromoRequestParams struct {
	// Номер строки, которой начинается выборка
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Количество возвращаемых объектов на странице
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Поле для сортировки (active_from, date_create)
	Sort string `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	// Направление сортировки (desc, asc)
	Order                string   `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromoRequestParams) Reset()         { *m = PromoRequestParams{} }
func (m *PromoRequestParams) String() string { return proto.CompactTextString(m) }
func (*PromoRequestParams) ProtoMessage()    {}
func (*PromoRequestParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{4}
}

func (m *PromoRequestParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PromoRequestParams.Unmarshal(m, b)
}
func (m *PromoRequestParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PromoRequestParams.Marshal(b, m, deterministic)
}
func (m *PromoRequestParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoRequestParams.Merge(m, src)
}
func (m *PromoRequestParams) XXX_Size() int {
	return xxx_messageInfo_PromoRequestParams.Size(m)
}
func (m *PromoRequestParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoRequestParams.DiscardUnknown(m)
}

var xxx_messageInfo_PromoRequestParams proto.InternalMessageInfo

func (m *PromoRequestParams) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PromoRequestParams) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *PromoRequestParams) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *PromoRequestParams) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

// Объект акции
type PromoObject struct {
	// id акции
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Автор
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// Активность (true - активна, false - черновик)
	Active bool `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	// Дата начала активности
	ActiveFrom float64 `protobuf:"fixed64,5,opt,name=activeFrom,proto3" json:"activeFrom,omitempty"`
	// Текстовое описание
	Text string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	// Текствое описание (для визуального редактора)
	TextJson string `protobuf:"bytes,7,opt,name=textJson,proto3" json:"textJson,omitempty"`
	// Период действия (текст)
	Period               string   `protobuf:"bytes,8,opt,name=period,proto3" json:"period,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromoObject) Reset()         { *m = PromoObject{} }
func (m *PromoObject) String() string { return proto.CompactTextString(m) }
func (*PromoObject) ProtoMessage()    {}
func (*PromoObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{5}
}

func (m *PromoObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PromoObject.Unmarshal(m, b)
}
func (m *PromoObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PromoObject.Marshal(b, m, deterministic)
}
func (m *PromoObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoObject.Merge(m, src)
}
func (m *PromoObject) XXX_Size() int {
	return xxx_messageInfo_PromoObject.Size(m)
}
func (m *PromoObject) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoObject.DiscardUnknown(m)
}

var xxx_messageInfo_PromoObject proto.InternalMessageInfo

func (m *PromoObject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PromoObject) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PromoObject) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *PromoObject) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *PromoObject) GetActiveFrom() float64 {
	if m != nil {
		return m.ActiveFrom
	}
	return 0
}

func (m *PromoObject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *PromoObject) GetTextJson() string {
	if m != nil {
		return m.TextJson
	}
	return ""
}

func (m *PromoObject) GetPeriod() string {
	if m != nil {
		return m.Period
	}
	return ""
}

// Объект списка акций
type PromoList struct {
	// Список элементов
	Promo                []*PromoObject `protobuf:"bytes,1,rep,name=promo,proto3" json:"promo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PromoList) Reset()         { *m = PromoList{} }
func (m *PromoList) String() string { return proto.CompactTextString(m) }
func (*PromoList) ProtoMessage()    {}
func (*PromoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{6}
}

func (m *PromoList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PromoList.Unmarshal(m, b)
}
func (m *PromoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PromoList.Marshal(b, m, deterministic)
}
func (m *PromoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoList.Merge(m, src)
}
func (m *PromoList) XXX_Size() int {
	return xxx_messageInfo_PromoList.Size(m)
}
func (m *PromoList) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoList.DiscardUnknown(m)
}

var xxx_messageInfo_PromoList proto.InternalMessageInfo

func (m *PromoList) GetPromo() []*PromoObject {
	if m != nil {
		return m.Promo
	}
	return nil
}

// Базовый формат ответа
type BaseResponse struct {
	// Признак успешности
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Сообщение при ошибке
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseResponse) Reset()         { *m = BaseResponse{} }
func (m *BaseResponse) String() string { return proto.CompactTextString(m) }
func (*BaseResponse) ProtoMessage()    {}
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{7}
}

func (m *BaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaseResponse.Unmarshal(m, b)
}
func (m *BaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaseResponse.Marshal(b, m, deterministic)
}
func (m *BaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseResponse.Merge(m, src)
}
func (m *BaseResponse) XXX_Size() int {
	return xxx_messageInfo_BaseResponse.Size(m)
}
func (m *BaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BaseResponse proto.InternalMessageInfo

func (m *BaseResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *BaseResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Объект списка новостей
type NewsList struct {
	// Список элементов
	News []*NewsObject `protobuf:"bytes,1,rep,name=news,proto3" json:"news,omitempty"`
	// Общее количество
	Total                int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewsList) Reset()         { *m = NewsList{} }
func (m *NewsList) String() string { return proto.CompactTextString(m) }
func (*NewsList) ProtoMessage()    {}
func (*NewsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{8}
}

func (m *NewsList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewsList.Unmarshal(m, b)
}
func (m *NewsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewsList.Marshal(b, m, deterministic)
}
func (m *NewsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsList.Merge(m, src)
}
func (m *NewsList) XXX_Size() int {
	return xxx_messageInfo_NewsList.Size(m)
}
func (m *NewsList) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsList.DiscardUnknown(m)
}

var xxx_messageInfo_NewsList proto.InternalMessageInfo

func (m *NewsList) GetNews() []*NewsObject {
	if m != nil {
		return m.News
	}
	return nil
}

func (m *NewsList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Объект новости
type RequestNewsObject struct {
	// Id повости. С фронта НЕ нужно передавать, необходимо для передачи id через url в методе (update)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Активность (true - активна, false - черновик)
	Active bool `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	// Дата начала активности
	ActiveFrom int64 `protobuf:"varint,4,opt,name=activeFrom,proto3" json:"activeFrom,omitempty"`
	// Текстовое описание
	Text string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Текствое описание (для визуального редактора)
	TextJson string `protobuf:"bytes,6,opt,name=textJson,proto3" json:"textJson,omitempty"`
	// Список тегов
	Tags []*Tag `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// Список файлов для прикрепления
	Files []*File `protobuf:"bytes,9,rep,name=files,proto3" json:"files,omitempty"`
	// Важное
	IsImportant          bool     `protobuf:"varint,10,opt,name=isImportant,proto3" json:"isImportant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestNewsObject) Reset()         { *m = RequestNewsObject{} }
func (m *RequestNewsObject) String() string { return proto.CompactTextString(m) }
func (*RequestNewsObject) ProtoMessage()    {}
func (*RequestNewsObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{9}
}

func (m *RequestNewsObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestNewsObject.Unmarshal(m, b)
}
func (m *RequestNewsObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestNewsObject.Marshal(b, m, deterministic)
}
func (m *RequestNewsObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestNewsObject.Merge(m, src)
}
func (m *RequestNewsObject) XXX_Size() int {
	return xxx_messageInfo_RequestNewsObject.Size(m)
}
func (m *RequestNewsObject) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestNewsObject.DiscardUnknown(m)
}

var xxx_messageInfo_RequestNewsObject proto.InternalMessageInfo

func (m *RequestNewsObject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestNewsObject) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RequestNewsObject) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *RequestNewsObject) GetActiveFrom() int64 {
	if m != nil {
		return m.ActiveFrom
	}
	return 0
}

func (m *RequestNewsObject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *RequestNewsObject) GetTextJson() string {
	if m != nil {
		return m.TextJson
	}
	return ""
}

func (m *RequestNewsObject) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *RequestNewsObject) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *RequestNewsObject) GetIsImportant() bool {
	if m != nil {
		return m.IsImportant
	}
	return false
}

// Объект новости
type NewsObject struct {
	// id повости
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Автор
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// Активность (true - активна, false - черновик)
	Active bool `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	// Дата начала активности
	ActiveFrom float64 `protobuf:"fixed64,5,opt,name=activeFrom,proto3" json:"activeFrom,omitempty"`
	// Текстовое описание
	Text string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	// Текствое описание (для визуального редактора)
	TextJson string `protobuf:"bytes,7,opt,name=textJson,proto3" json:"textJson,omitempty"`
	// Идентификатор пользователя
	UserId string `protobuf:"bytes,8,opt,name=userId,proto3" json:"userId,omitempty"`
	// Список тегов
	Tags []*Tag `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// Список прикрепленных файлов
	FilesInfo []*File `protobuf:"bytes,10,rep,name=filesInfo,proto3" json:"filesInfo,omitempty"`
	// Важное
	IsImportant          bool     `protobuf:"varint,11,opt,name=isImportant,proto3" json:"isImportant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewsObject) Reset()         { *m = NewsObject{} }
func (m *NewsObject) String() string { return proto.CompactTextString(m) }
func (*NewsObject) ProtoMessage()    {}
func (*NewsObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{10}
}

func (m *NewsObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewsObject.Unmarshal(m, b)
}
func (m *NewsObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewsObject.Marshal(b, m, deterministic)
}
func (m *NewsObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewsObject.Merge(m, src)
}
func (m *NewsObject) XXX_Size() int {
	return xxx_messageInfo_NewsObject.Size(m)
}
func (m *NewsObject) XXX_DiscardUnknown() {
	xxx_messageInfo_NewsObject.DiscardUnknown(m)
}

var xxx_messageInfo_NewsObject proto.InternalMessageInfo

func (m *NewsObject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NewsObject) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *NewsObject) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *NewsObject) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *NewsObject) GetActiveFrom() float64 {
	if m != nil {
		return m.ActiveFrom
	}
	return 0
}

func (m *NewsObject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *NewsObject) GetTextJson() string {
	if m != nil {
		return m.TextJson
	}
	return ""
}

func (m *NewsObject) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *NewsObject) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *NewsObject) GetFilesInfo() []*File {
	if m != nil {
		return m.FilesInfo
	}
	return nil
}

func (m *NewsObject) GetIsImportant() bool {
	if m != nil {
		return m.IsImportant
	}
	return false
}

// Объект тега
type Tag struct {
	// id тега
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{11}
}

func (m *Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tag.Unmarshal(m, b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return xxx_messageInfo_Tag.Size(m)
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Объект списка тегов
type TagList struct {
	// Список элементов
	Tag                  []*Tag   `protobuf:"bytes,1,rep,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagList) Reset()         { *m = TagList{} }
func (m *TagList) String() string { return proto.CompactTextString(m) }
func (*TagList) ProtoMessage()    {}
func (*TagList) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{12}
}

func (m *TagList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagList.Unmarshal(m, b)
}
func (m *TagList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagList.Marshal(b, m, deterministic)
}
func (m *TagList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagList.Merge(m, src)
}
func (m *TagList) XXX_Size() int {
	return xxx_messageInfo_TagList.Size(m)
}
func (m *TagList) XXX_DiscardUnknown() {
	xxx_messageInfo_TagList.DiscardUnknown(m)
}

var xxx_messageInfo_TagList proto.InternalMessageInfo

func (m *TagList) GetTag() []*Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

// Пустой запрос (служебный объект)
type EmptyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{13}
}

func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyRequest.Unmarshal(m, b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return xxx_messageInfo_EmptyRequest.Size(m)
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

// Объект идентификации записи (служебный объект)
type ObjectId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectId) Reset()         { *m = ObjectId{} }
func (m *ObjectId) String() string { return proto.CompactTextString(m) }
func (*ObjectId) ProtoMessage()    {}
func (*ObjectId) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{14}
}

func (m *ObjectId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectId.Unmarshal(m, b)
}
func (m *ObjectId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectId.Marshal(b, m, deterministic)
}
func (m *ObjectId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectId.Merge(m, src)
}
func (m *ObjectId) XXX_Size() int {
	return xxx_messageInfo_ObjectId.Size(m)
}
func (m *ObjectId) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectId.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectId proto.InternalMessageInfo

func (m *ObjectId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Объект идентификации записи (служебный объект, для чпу)
type ObjectSlug struct {
	Slug                 string   `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectSlug) Reset()         { *m = ObjectSlug{} }
func (m *ObjectSlug) String() string { return proto.CompactTextString(m) }
func (*ObjectSlug) ProtoMessage()    {}
func (*ObjectSlug) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{15}
}

func (m *ObjectSlug) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectSlug.Unmarshal(m, b)
}
func (m *ObjectSlug) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectSlug.Marshal(b, m, deterministic)
}
func (m *ObjectSlug) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectSlug.Merge(m, src)
}
func (m *ObjectSlug) XXX_Size() int {
	return xxx_messageInfo_ObjectSlug.Size(m)
}
func (m *ObjectSlug) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectSlug.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectSlug proto.InternalMessageInfo

func (m *ObjectSlug) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

// Объект входящего файла
type File struct {
	// id файла
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Расширение
	Ext string `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`
	// base64 для файла
	Base64 string `protobuf:"bytes,4,opt,name=base64,proto3" json:"base64,omitempty"`
	// Дата создания
	DateCreate int64 `protobuf:"varint,5,opt,name=dateCreate,proto3" json:"dateCreate,omitempty"`
	// id пользователя, создавшего файл
	UserId               string   `protobuf:"bytes,6,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{16}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *File) GetBase64() string {
	if m != nil {
		return m.Base64
	}
	return ""
}

func (m *File) GetDateCreate() int64 {
	if m != nil {
		return m.DateCreate
	}
	return 0
}

func (m *File) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// Объект идентификатора файла
type FileId struct {
	//Идентификатор файла
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileId) Reset()         { *m = FileId{} }
func (m *FileId) String() string { return proto.CompactTextString(m) }
func (*FileId) ProtoMessage()    {}
func (*FileId) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{17}
}

func (m *FileId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileId.Unmarshal(m, b)
}
func (m *FileId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileId.Marshal(b, m, deterministic)
}
func (m *FileId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileId.Merge(m, src)
}
func (m *FileId) XXX_Size() int {
	return xxx_messageInfo_FileId.Size(m)
}
func (m *FileId) XXX_DiscardUnknown() {
	xxx_messageInfo_FileId.DiscardUnknown(m)
}

var xxx_messageInfo_FileId proto.InternalMessageInfo

func (m *FileId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Объект ссылки на файл
type FileLink struct {
	// Ссылка на файл
	Link                 string   `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileLink) Reset()         { *m = FileLink{} }
func (m *FileLink) String() string { return proto.CompactTextString(m) }
func (*FileLink) ProtoMessage()    {}
func (*FileLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_64914afe9329bf19, []int{18}
}

func (m *FileLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileLink.Unmarshal(m, b)
}
func (m *FileLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileLink.Marshal(b, m, deterministic)
}
func (m *FileLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileLink.Merge(m, src)
}
func (m *FileLink) XXX_Size() int {
	return xxx_messageInfo_FileLink.Size(m)
}
func (m *FileLink) XXX_DiscardUnknown() {
	xxx_messageInfo_FileLink.DiscardUnknown(m)
}

var xxx_messageInfo_FileLink proto.InternalMessageInfo

func (m *FileLink) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func init() {
	proto.RegisterType((*HealthResponse)(nil), "content_v1.HealthResponse")
	proto.RegisterType((*Email)(nil), "content_v1.Email")
	proto.RegisterType((*NewsRequestParams)(nil), "content_v1.NewsRequestParams")
	proto.RegisterType((*ListRequestFilter)(nil), "content_v1.ListRequestFilter")
	proto.RegisterType((*PromoRequestParams)(nil), "content_v1.PromoRequestParams")
	proto.RegisterType((*PromoObject)(nil), "content_v1.PromoObject")
	proto.RegisterType((*PromoList)(nil), "content_v1.PromoList")
	proto.RegisterType((*BaseResponse)(nil), "content_v1.BaseResponse")
	proto.RegisterType((*NewsList)(nil), "content_v1.NewsList")
	proto.RegisterType((*RequestNewsObject)(nil), "content_v1.RequestNewsObject")
	proto.RegisterType((*NewsObject)(nil), "content_v1.NewsObject")
	proto.RegisterType((*Tag)(nil), "content_v1.Tag")
	proto.RegisterType((*TagList)(nil), "content_v1.TagList")
	proto.RegisterType((*EmptyRequest)(nil), "content_v1.EmptyRequest")
	proto.RegisterType((*ObjectId)(nil), "content_v1.ObjectId")
	proto.RegisterType((*ObjectSlug)(nil), "content_v1.ObjectSlug")
	proto.RegisterType((*File)(nil), "content_v1.File")
	proto.RegisterType((*FileId)(nil), "content_v1.FileId")
	proto.RegisterType((*FileLink)(nil), "content_v1.FileLink")
}

func init() {
	proto.RegisterFile("news-ms/app/interfaces/grpc/proto/v1/news/news.proto", fileDescriptor_64914afe9329bf19)
}

var fileDescriptor_64914afe9329bf19 = []byte{
	// 1166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4b, 0x6f, 0x1c, 0x45,
	0x10, 0xd6, 0x3e, 0xbd, 0x5b, 0x6b, 0x42, 0xdc, 0xce, 0x63, 0x32, 0xd8, 0x66, 0xe9, 0x44, 0xc8,
	0x58, 0xc4, 0xa3, 0x2c, 0x81, 0x43, 0x2e, 0x48, 0x36, 0xb1, 0x31, 0xb2, 0xe2, 0x68, 0x6c, 0x04,
	0x04, 0x05, 0xd2, 0xde, 0xad, 0x1d, 0x0f, 0x9e, 0x57, 0xa6, 0x7b, 0x1d, 0xac, 0x90, 0x0b, 0x67,
	0x0e, 0x48, 0xfc, 0x10, 0xae, 0x5c, 0x39, 0x73, 0xe4, 0x2f, 0xe4, 0x87, 0xa0, 0xae, 0xe9, 0xb1,
	0x67, 0x1f, 0x63, 0x81, 0x91, 0xe0, 0x92, 0x74, 0x55, 0xd7, 0xd4, 0x57, 0xfd, 0x7d, 0xd5, 0xd5,
	0x6b, 0xb8, 0x1f, 0xe1, 0x0b, 0x79, 0x37, 0x94, 0x8e, 0x48, 0x12, 0xc7, 0x8f, 0x14, 0xa6, 0x43,
	0xd1, 0x47, 0xe9, 0x78, 0x69, 0xd2, 0x77, 0x92, 0x34, 0x56, 0xb1, 0x73, 0x72, 0xcf, 0xd1, 0x41,
	0xf4, 0xcf, 0x3a, 0xb9, 0x18, 0xf4, 0xe3, 0x48, 0x61, 0xa4, 0xbe, 0x3d, 0xb9, 0x67, 0x2f, 0x79,
	0x71, 0xec, 0x05, 0xe8, 0x88, 0xc4, 0x77, 0x44, 0x14, 0xc5, 0x4a, 0x28, 0x3f, 0x8e, 0x4c, 0x24,
	0xff, 0x12, 0xae, 0x7c, 0x8a, 0x22, 0x50, 0x47, 0x2e, 0xca, 0x24, 0x8e, 0x24, 0xb2, 0x2e, 0x74,
	0x24, 0xa6, 0x27, 0x7e, 0x1f, 0x1f, 0x89, 0x10, 0xad, 0x4a, 0xb7, 0xb2, 0xda, 0x76, 0x8b, 0x2e,
	0x76, 0x07, 0xde, 0x30, 0xe6, 0xbe, 0x12, 0x6a, 0x24, 0xad, 0x2a, 0xc5, 0x8c, 0x3b, 0xf9, 0x32,
	0x34, 0x1e, 0x86, 0xc2, 0x0f, 0xd8, 0x35, 0x68, 0xa0, 0x5e, 0x98, 0x54, 0x99, 0xc1, 0x7f, 0xab,
	0xc0, 0xc2, 0x23, 0x7c, 0x21, 0x5d, 0x7c, 0x3e, 0x42, 0xa9, 0x1e, 0x8b, 0x54, 0x84, 0x92, 0xdd,
	0x80, 0x66, 0x3c, 0x1c, 0x4a, 0x54, 0x14, 0x5c, 0x73, 0x8d, 0xa5, 0x73, 0x04, 0x7e, 0xe8, 0x2b,
	0x82, 0xaa, 0xb9, 0x99, 0xc1, 0x18, 0xd4, 0x65, 0x9c, 0x2a, 0xab, 0x46, 0x89, 0x69, 0xad, 0x23,
	0xe3, 0x74, 0x80, 0xa9, 0x55, 0xcf, 0xd0, 0xc8, 0xd0, 0xde, 0xe7, 0x23, 0x4c, 0x4f, 0xad, 0x46,
	0xe6, 0x25, 0x83, 0x7d, 0x08, 0xcd, 0xa1, 0x1f, 0x28, 0x4c, 0xad, 0x66, 0xb7, 0xb2, 0xda, 0xe9,
	0x2d, 0xaf, 0x9f, 0xf3, 0xb6, 0xbe, 0xeb, 0x4b, 0x65, 0x8a, 0xdb, 0xa2, 0x20, 0xd7, 0x04, 0xf3,
	0x8f, 0x61, 0x61, 0x6a, 0x53, 0x57, 0x3e, 0x92, 0x98, 0xee, 0x0c, 0xcc, 0x31, 0x8d, 0xa5, 0x6b,
	0x0c, 0xe3, 0x01, 0x1a, 0x8e, 0x68, 0xcd, 0x03, 0x60, 0x8f, 0xd3, 0x38, 0x8c, 0xff, 0x93, 0xb3,
	0xf3, 0x3f, 0x2a, 0xd0, 0x21, 0xb8, 0xbd, 0xc3, 0xef, 0xb0, 0xaf, 0xd8, 0x15, 0xa8, 0xfa, 0x79,
	0x95, 0x55, 0x7f, 0xa0, 0xbf, 0x52, 0xbe, 0x0a, 0xf2, 0x12, 0x33, 0x43, 0x57, 0x23, 0x46, 0xea,
	0x28, 0x4e, 0x0d, 0x82, 0xb1, 0xc8, 0xdf, 0x57, 0xfe, 0x09, 0x12, 0x48, 0xcb, 0x35, 0x16, 0x5b,
	0x01, 0xc8, 0x56, 0x5b, 0x69, 0x1c, 0x12, 0xcd, 0x15, 0xb7, 0xe0, 0xd1, 0xf5, 0x2a, 0xfc, 0x5e,
	0x11, 0xd3, 0x6d, 0x97, 0xd6, 0xcc, 0x86, 0x96, 0xfe, 0xff, 0x33, 0x19, 0x47, 0xd6, 0x1c, 0xf9,
	0xcf, 0x6c, 0x8d, 0x93, 0x60, 0xea, 0xc7, 0x03, 0xab, 0x95, 0xe1, 0x67, 0x16, 0x7f, 0x00, 0x6d,
	0x3a, 0x8c, 0x56, 0x80, 0xdd, 0x85, 0x46, 0xa2, 0x0d, 0xab, 0xd2, 0xad, 0xad, 0x76, 0x7a, 0x37,
	0x8b, 0xfa, 0x15, 0x8e, 0xec, 0x66, 0x51, 0x7c, 0x03, 0xe6, 0x37, 0x84, 0xc4, 0xb3, 0x56, 0xb7,
	0x60, 0x4e, 0x8e, 0xfa, 0x7d, 0x94, 0x92, 0xe8, 0x68, 0xb9, 0xb9, 0xa9, 0x77, 0x42, 0x94, 0x52,
	0x78, 0x39, 0x2b, 0xb9, 0xc9, 0x77, 0xa1, 0xa5, 0xdb, 0x96, 0xe0, 0xd7, 0xa0, 0xae, 0x2f, 0x9d,
	0x41, 0xbf, 0x51, 0x44, 0xd7, 0x31, 0x06, 0x9c, 0x62, 0x88, 0xe5, 0x58, 0x89, 0x80, 0xf2, 0x35,
	0xdc, 0xcc, 0xe0, 0x3f, 0x57, 0x61, 0xc1, 0x74, 0xc1, 0xf9, 0x17, 0xff, 0x40, 0xa1, 0x4c, 0x89,
	0xda, 0x05, 0x4a, 0xd4, 0xa9, 0x69, 0x66, 0x29, 0xd1, 0x28, 0x51, 0xa2, 0x39, 0xa1, 0xc4, 0x6d,
	0xa8, 0x2b, 0xe1, 0x49, 0xab, 0x45, 0xa7, 0x7c, 0xb3, 0x78, 0xca, 0x03, 0xe1, 0xb9, 0xb4, 0xc9,
	0xde, 0x85, 0xc6, 0xd0, 0x0f, 0x50, 0x5a, 0x6d, 0x8a, 0xba, 0x5a, 0x8c, 0xda, 0xf2, 0x03, 0x74,
	0xb3, 0x6d, 0x3d, 0x5d, 0x7c, 0xb9, 0x13, 0x26, 0x71, 0xaa, 0x44, 0xa4, 0x2c, 0xa0, 0xca, 0x8b,
	0x2e, 0xfe, 0x7b, 0x15, 0xe0, 0x52, 0x5c, 0xfc, 0xcf, 0xdd, 0x6a, 0x6e, 0x7f, 0x6b, 0xec, 0xf6,
	0xe7, 0xdc, 0xb5, 0x2f, 0xe2, 0x6e, 0x1d, 0xda, 0x44, 0xce, 0x4e, 0x34, 0x8c, 0x2d, 0x28, 0xe1,
	0xef, 0x3c, 0x64, 0x92, 0xc3, 0xce, 0x34, 0x87, 0xef, 0x41, 0xed, 0x40, 0x78, 0x53, 0xdc, 0x31,
	0xa8, 0x47, 0x7a, 0xa6, 0x9b, 0x59, 0xa4, 0xd7, 0xfc, 0x7d, 0x98, 0x3b, 0x10, 0x1e, 0xb5, 0xf3,
	0x3b, 0x50, 0x53, 0xc2, 0x33, 0xdd, 0x3c, 0x55, 0xab, 0xde, 0xe3, 0x57, 0x60, 0xfe, 0x61, 0x98,
	0xa8, 0x53, 0xd3, 0xb3, 0xdc, 0x86, 0x56, 0xa6, 0xd3, 0xce, 0x60, 0x12, 0x8d, 0x77, 0x01, 0xb2,
	0xbd, 0xfd, 0x60, 0xe4, 0xd1, 0xbc, 0x0a, 0x46, 0x9e, 0xd9, 0xa7, 0x35, 0xff, 0xa9, 0x02, 0x75,
	0x7d, 0xb8, 0xbf, 0x53, 0x28, 0xbb, 0x0a, 0x35, 0xad, 0x48, 0xa6, 0xaf, 0x5e, 0x6a, 0xd2, 0x0f,
	0x85, 0xc4, 0x8f, 0xee, 0x9b, 0x79, 0x67, 0x2c, 0x2d, 0xee, 0x40, 0x28, 0xdc, 0x4c, 0x51, 0x28,
	0x24, 0x71, 0x6b, 0x6e, 0xc1, 0x53, 0x10, 0xab, 0x59, 0x14, 0x8b, 0x5b, 0xd0, 0xd4, 0xd5, 0xcc,
	0x38, 0xca, 0x0a, 0xb4, 0xf4, 0xce, 0xae, 0x1f, 0x1d, 0xeb, 0xda, 0x02, 0x3f, 0x3a, 0xce, 0x0f,
	0xa2, 0xd7, 0xbd, 0x1f, 0x60, 0x71, 0x33, 0x63, 0x6b, 0xf3, 0x08, 0xfb, 0xc7, 0xfb, 0xd9, 0x43,
	0xc8, 0x10, 0x3a, 0x64, 0x67, 0x2f, 0x2c, 0xb3, 0x8a, 0x94, 0x16, 0x69, 0xb4, 0xed, 0xe2, 0xce,
	0xf8, 0x7b, 0xcc, 0xbb, 0x3f, 0xfe, 0xf9, 0xfa, 0x97, 0xaa, 0xcd, 0x2c, 0x07, 0xf5, 0x13, 0x4e,
	0x4f, 0x7d, 0x28, 0x22, 0xe1, 0xa1, 0x73, 0x44, 0x91, 0xbd, 0x5f, 0x1b, 0xd0, 0xd1, 0x37, 0x26,
	0x87, 0x7d, 0x02, 0x73, 0xdb, 0x48, 0xf3, 0x84, 0x2d, 0x4f, 0xce, 0xa4, 0xb1, 0x27, 0xc7, 0xbe,
	0x36, 0xb9, 0xad, 0xfb, 0x80, 0xdb, 0x84, 0x78, 0x8d, 0xb1, 0x02, 0xa2, 0xf9, 0x91, 0xc1, 0xbe,
	0x80, 0xe6, 0x36, 0xaa, 0xbd, 0x08, 0xd9, 0xd8, 0xb7, 0x79, 0x13, 0xd8, 0x25, 0x43, 0x90, 0xbf,
	0x4d, 0x39, 0x6f, 0xb1, 0x9b, 0xd3, 0x39, 0x9d, 0x97, 0xfe, 0xe0, 0x15, 0x3b, 0x82, 0xf9, 0x2c,
	0xf1, 0xc6, 0x29, 0xf5, 0xcb, 0x8d, 0xe9, 0xf4, 0xda, 0x5f, 0x0a, 0xb0, 0x4a, 0x00, 0x9c, 0x75,
	0x67, 0x00, 0x24, 0xa3, 0xc3, 0xc0, 0xef, 0x3b, 0x2f, 0x75, 0xd3, 0xbd, 0x62, 0xcf, 0xa0, 0x69,
	0x1a, 0x61, 0x8c, 0x9d, 0xa9, 0x31, 0x6c, 0x8f, 0xe9, 0x55, 0x7c, 0x38, 0xf8, 0x32, 0x81, 0xdd,
	0xe4, 0x33, 0x18, 0x7a, 0x50, 0x59, 0x63, 0x08, 0xcd, 0xcf, 0x93, 0xc1, 0xbf, 0x42, 0xe0, 0x84,
	0xb0, 0x64, 0x97, 0xf1, 0xa5, 0x61, 0xbe, 0x82, 0xe6, 0x27, 0x18, 0xa0, 0x2a, 0xd3, 0xa2, 0x3c,
	0xbb, 0x51, 0x63, 0xad, 0x54, 0x8d, 0xa7, 0xd0, 0xd9, 0x46, 0x75, 0xde, 0xf3, 0x93, 0xe3, 0x68,
	0x67, 0x30, 0xde, 0x3b, 0x79, 0x24, 0xbf, 0x43, 0x99, 0x57, 0xd8, 0xd2, 0x8c, 0xcc, 0x7a, 0x82,
	0x51, 0xfa, 0xde, 0xeb, 0x1a, 0xcc, 0xd3, 0xfb, 0x9c, 0xb7, 0xec, 0x37, 0xd0, 0xda, 0x46, 0x45,
	0x2e, 0xb6, 0x32, 0xf5, 0x8a, 0x8f, 0x37, 0xed, 0xf5, 0xa9, 0x7d, 0xea, 0xda, 0xb7, 0x08, 0xf9,
	0x3a, 0x5b, 0x1c, 0x47, 0xa6, 0x97, 0x5f, 0x53, 0x75, 0x61, 0xdb, 0x96, 0xfd, 0x72, 0x98, 0x79,
	0xfb, 0xf2, 0xac, 0x19, 0x55, 0xcf, 0xce, 0xc4, 0x2e, 0x4b, 0x72, 0x81, 0x10, 0xb7, 0x29, 0xfd,
	0xb2, 0x5d, 0x9a, 0x5e, 0xeb, 0xfc, 0xf5, 0x59, 0xc3, 0x5e, 0x02, 0x61, 0x85, 0x10, 0x2c, 0x3e,
	0x8b, 0x16, 0x9d, 0xfc, 0xc9, 0xa5, 0x9b, 0xc8, 0x50, 0xb3, 0x56, 0x5a, 0x7b, 0xef, 0x29, 0xc0,
	0x81, 0xf0, 0x72, 0x8d, 0xf7, 0xa0, 0xb6, 0x8d, 0xea, 0x82, 0x29, 0xb8, 0x38, 0xf1, 0xe4, 0x90,
	0xac, 0xb7, 0x08, 0x65, 0x91, 0x2d, 0x8c, 0xa3, 0x28, 0xe1, 0x1d, 0x36, 0xe9, 0x4f, 0x98, 0x0f,
	0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x53, 0xed, 0xd6, 0x24, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ContentCheckServiceClient is the client API for ContentCheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContentCheckServiceClient interface {
	// Проверка жизнеспособности сервиса
	CheckHealth(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type contentCheckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentCheckServiceClient(cc grpc.ClientConnInterface) ContentCheckServiceClient {
	return &contentCheckServiceClient{cc}
}

func (c *contentCheckServiceClient) CheckHealth(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/content_v1.ContentCheckService/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentCheckServiceServer is the server API for ContentCheckService service.
type ContentCheckServiceServer interface {
	// Проверка жизнеспособности сервиса
	CheckHealth(context.Context, *EmptyRequest) (*HealthResponse, error)
}

// UnimplementedContentCheckServiceServer can be embedded to have forward compatible implementations.
type UnimplementedContentCheckServiceServer struct {
}

func (*UnimplementedContentCheckServiceServer) CheckHealth(ctx context.Context, req *EmptyRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}

func RegisterContentCheckServiceServer(s *grpc.Server, srv ContentCheckServiceServer) {
	s.RegisterService(&_ContentCheckService_serviceDesc, srv)
}

func _ContentCheckService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentCheckServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.ContentCheckService/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentCheckServiceServer).CheckHealth(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContentCheckService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "content_v1.ContentCheckService",
	HandlerType: (*ContentCheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _ContentCheckService_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news-ms/app/interfaces/grpc/proto/v1/news/news.proto",
}

// NewsServiceClient is the client API for NewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NewsServiceClient interface {
	// Получение списка новостей
	GetNews(ctx context.Context, in *NewsRequestParams, opts ...grpc.CallOption) (*NewsList, error)
	// Получение детальной информации по новости
	GetOne(ctx context.Context, in *ObjectId, opts ...grpc.CallOption) (*NewsObject, error)
	// Получение детальной информации по новости для отображения при переходе по письму
	GetOneBySlug(ctx context.Context, in *ObjectSlug, opts ...grpc.CallOption) (*NewsObject, error)
	// Создание новости
	Create(ctx context.Context, in *RequestNewsObject, opts ...grpc.CallOption) (*BaseResponse, error)
	// Обновление новости
	Update(ctx context.Context, in *RequestNewsObject, opts ...grpc.CallOption) (*BaseResponse, error)
	// Удаление новости
	Delete(ctx context.Context, in *ObjectId, opts ...grpc.CallOption) (*BaseResponse, error)
	//Получить ссылку на файл для скачивания
	GetFileLink(ctx context.Context, in *FileId, opts ...grpc.CallOption) (*FileLink, error)
}

type newsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsServiceClient(cc grpc.ClientConnInterface) NewsServiceClient {
	return &newsServiceClient{cc}
}

func (c *newsServiceClient) GetNews(ctx context.Context, in *NewsRequestParams, opts ...grpc.CallOption) (*NewsList, error) {
	out := new(NewsList)
	err := c.cc.Invoke(ctx, "/content_v1.NewsService/GetNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetOne(ctx context.Context, in *ObjectId, opts ...grpc.CallOption) (*NewsObject, error) {
	out := new(NewsObject)
	err := c.cc.Invoke(ctx, "/content_v1.NewsService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetOneBySlug(ctx context.Context, in *ObjectSlug, opts ...grpc.CallOption) (*NewsObject, error) {
	out := new(NewsObject)
	err := c.cc.Invoke(ctx, "/content_v1.NewsService/GetOneBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) Create(ctx context.Context, in *RequestNewsObject, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/content_v1.NewsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) Update(ctx context.Context, in *RequestNewsObject, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/content_v1.NewsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) Delete(ctx context.Context, in *ObjectId, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/content_v1.NewsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetFileLink(ctx context.Context, in *FileId, opts ...grpc.CallOption) (*FileLink, error) {
	out := new(FileLink)
	err := c.cc.Invoke(ctx, "/content_v1.NewsService/GetFileLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsServiceServer is the server API for NewsService service.
type NewsServiceServer interface {
	// Получение списка новостей
	GetNews(context.Context, *NewsRequestParams) (*NewsList, error)
	// Получение детальной информации по новости
	GetOne(context.Context, *ObjectId) (*NewsObject, error)
	// Получение детальной информации по новости для отображения при переходе по письму
	GetOneBySlug(context.Context, *ObjectSlug) (*NewsObject, error)
	// Создание новости
	Create(context.Context, *RequestNewsObject) (*BaseResponse, error)
	// Обновление новости
	Update(context.Context, *RequestNewsObject) (*BaseResponse, error)
	// Удаление новости
	Delete(context.Context, *ObjectId) (*BaseResponse, error)
	//Получить ссылку на файл для скачивания
	GetFileLink(context.Context, *FileId) (*FileLink, error)
}

// UnimplementedNewsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNewsServiceServer struct {
}

func (*UnimplementedNewsServiceServer) GetNews(ctx context.Context, req *NewsRequestParams) (*NewsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNews not implemented")
}
func (*UnimplementedNewsServiceServer) GetOne(ctx context.Context, req *ObjectId) (*NewsObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedNewsServiceServer) GetOneBySlug(ctx context.Context, req *ObjectSlug) (*NewsObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneBySlug not implemented")
}
func (*UnimplementedNewsServiceServer) Create(ctx context.Context, req *RequestNewsObject) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedNewsServiceServer) Update(ctx context.Context, req *RequestNewsObject) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedNewsServiceServer) Delete(ctx context.Context, req *ObjectId) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedNewsServiceServer) GetFileLink(ctx context.Context, req *FileId) (*FileLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileLink not implemented")
}

func RegisterNewsServiceServer(s *grpc.Server, srv NewsServiceServer) {
	s.RegisterService(&_NewsService_serviceDesc, srv)
}

func _NewsService_GetNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.NewsService/GetNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNews(ctx, req.(*NewsRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.NewsService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetOne(ctx, req.(*ObjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetOneBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectSlug)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetOneBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.NewsService/GetOneBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetOneBySlug(ctx, req.(*ObjectSlug))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNewsObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.NewsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).Create(ctx, req.(*RequestNewsObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNewsObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.NewsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).Update(ctx, req.(*RequestNewsObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.NewsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).Delete(ctx, req.(*ObjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetFileLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetFileLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.NewsService/GetFileLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetFileLink(ctx, req.(*FileId))
	}
	return interceptor(ctx, in, info, handler)
}

var _NewsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "content_v1.NewsService",
	HandlerType: (*NewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNews",
			Handler:    _NewsService_GetNews_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _NewsService_GetOne_Handler,
		},
		{
			MethodName: "GetOneBySlug",
			Handler:    _NewsService_GetOneBySlug_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _NewsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NewsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NewsService_Delete_Handler,
		},
		{
			MethodName: "GetFileLink",
			Handler:    _NewsService_GetFileLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news-ms/app/interfaces/grpc/proto/v1/news/news.proto",
}

// PromoServiceClient is the client API for PromoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PromoServiceClient interface {
	// получение списка акций
	GetPromo(ctx context.Context, in *PromoRequestParams, opts ...grpc.CallOption) (*PromoList, error)
	// Получение детальной информации по акции
	GetOne(ctx context.Context, in *ObjectId, opts ...grpc.CallOption) (*PromoObject, error)
	// Обновление акции
	Update(ctx context.Context, in *PromoObject, opts ...grpc.CallOption) (*BaseResponse, error)
	// Создание акции
	Create(ctx context.Context, in *PromoObject, opts ...grpc.CallOption) (*BaseResponse, error)
	// Удаление акции
	Delete(ctx context.Context, in *ObjectId, opts ...grpc.CallOption) (*BaseResponse, error)
}

type promoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPromoServiceClient(cc grpc.ClientConnInterface) PromoServiceClient {
	return &promoServiceClient{cc}
}

func (c *promoServiceClient) GetPromo(ctx context.Context, in *PromoRequestParams, opts ...grpc.CallOption) (*PromoList, error) {
	out := new(PromoList)
	err := c.cc.Invoke(ctx, "/content_v1.PromoService/GetPromo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promoServiceClient) GetOne(ctx context.Context, in *ObjectId, opts ...grpc.CallOption) (*PromoObject, error) {
	out := new(PromoObject)
	err := c.cc.Invoke(ctx, "/content_v1.PromoService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promoServiceClient) Update(ctx context.Context, in *PromoObject, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/content_v1.PromoService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promoServiceClient) Create(ctx context.Context, in *PromoObject, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/content_v1.PromoService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promoServiceClient) Delete(ctx context.Context, in *ObjectId, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/content_v1.PromoService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromoServiceServer is the server API for PromoService service.
type PromoServiceServer interface {
	// получение списка акций
	GetPromo(context.Context, *PromoRequestParams) (*PromoList, error)
	// Получение детальной информации по акции
	GetOne(context.Context, *ObjectId) (*PromoObject, error)
	// Обновление акции
	Update(context.Context, *PromoObject) (*BaseResponse, error)
	// Создание акции
	Create(context.Context, *PromoObject) (*BaseResponse, error)
	// Удаление акции
	Delete(context.Context, *ObjectId) (*BaseResponse, error)
}

// UnimplementedPromoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPromoServiceServer struct {
}

func (*UnimplementedPromoServiceServer) GetPromo(ctx context.Context, req *PromoRequestParams) (*PromoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromo not implemented")
}
func (*UnimplementedPromoServiceServer) GetOne(ctx context.Context, req *ObjectId) (*PromoObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedPromoServiceServer) Update(ctx context.Context, req *PromoObject) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedPromoServiceServer) Create(ctx context.Context, req *PromoObject) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedPromoServiceServer) Delete(ctx context.Context, req *ObjectId) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterPromoServiceServer(s *grpc.Server, srv PromoServiceServer) {
	s.RegisterService(&_PromoService_serviceDesc, srv)
}

func _PromoService_GetPromo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromoServiceServer).GetPromo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.PromoService/GetPromo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromoServiceServer).GetPromo(ctx, req.(*PromoRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromoService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromoServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.PromoService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromoServiceServer).GetOne(ctx, req.(*ObjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromoService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromoServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.PromoService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromoServiceServer).Update(ctx, req.(*PromoObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromoService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromoServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.PromoService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromoServiceServer).Create(ctx, req.(*PromoObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.PromoService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromoServiceServer).Delete(ctx, req.(*ObjectId))
	}
	return interceptor(ctx, in, info, handler)
}

var _PromoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "content_v1.PromoService",
	HandlerType: (*PromoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPromo",
			Handler:    _PromoService_GetPromo_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _PromoService_GetOne_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PromoService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PromoService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PromoService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news-ms/app/interfaces/grpc/proto/v1/news/news.proto",
}

// TagServiceClient is the client API for TagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TagServiceClient interface {
	// Получение тега
	Get(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TagList, error)
}

type tagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagServiceClient(cc grpc.ClientConnInterface) TagServiceClient {
	return &tagServiceClient{cc}
}

func (c *tagServiceClient) Get(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*TagList, error) {
	out := new(TagList)
	err := c.cc.Invoke(ctx, "/content_v1.TagService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagServiceServer is the server API for TagService service.
type TagServiceServer interface {
	// Получение тега
	Get(context.Context, *EmptyRequest) (*TagList, error)
}

// UnimplementedTagServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTagServiceServer struct {
}

func (*UnimplementedTagServiceServer) Get(ctx context.Context, req *EmptyRequest) (*TagList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterTagServiceServer(s *grpc.Server, srv TagServiceServer) {
	s.RegisterService(&_TagService_serviceDesc, srv)
}

func _TagService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content_v1.TagService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).Get(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "content_v1.TagService",
	HandlerType: (*TagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TagService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news-ms/app/interfaces/grpc/proto/v1/news/news.proto",
}
