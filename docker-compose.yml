version: '3.2'

services:
  geo: # Микросервис "Контроль доступа". GolangApp
    container_name: ${SERVICE}_golang_app
    expose:
      - 8080
    volumes:
      - ./app/:/app
    build:
      context: .
      dockerfile: ./.docker/Dockerfile
    ports:
      - "${SERVICE_PORT}:8080"
    environment:
      - DADATA_API_KEY=${DADATA_API_KEY}
      - DADATA_SECRET_KEY=${DADATA_API_KEY}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=${DB_PORT}
      - DB_DRIVER=${DB_DRIVER}
      - DB_NAME=${DB_NAME}
    networks:
      backend:
        ipv4_address: ${SERVICE_BACKEND_IP}

  postgres: # PostgresDb
    image: postgres:12.3
    container_name: ${SERVICE}_postgres
    hostname: ${DB_HOST}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./.docker/data/postgres/pgdata:/pgdata
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/pgdata
    networks:
      backend:
        ipv4_address: ${DB_HOST}

  redis:
    image: "redis:alpine"
    container_name: redis
    ports:
      - ${REDIS_PORT}:6379
    environment:
      - REDIS_REPLICATION_MODE=master
    networks:
      backend:
        ipv4_address: ${REDIS_HOST}

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:${REDIS_PORT}
    ports:
      - "8081:8081"
    networks:
      - backend

networks:
  backend:  # Сеть, видимая сервисам backend
    driver: bridge
    ipam:
      config:
        - subnet: ${BACKEND_SUBNET}
